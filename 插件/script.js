const API_KEY = 'sk-iclunnxwciaecoccggnxsnfdjxktykqklahszldfendzrgaf';
const API_URL = 'https://api.siliconflow.cn/v1/chat/completions';  // ËøôÈáå‰ΩøÁî®Êô∫Ë∞±AIÁöÑAPIÂú∞ÂùÄ

let currentChatId = Date.now().toString();
let currentMessages = [];

// Ê∑ªÂä†Êñ∞ÁöÑÂèòÈáèÊù•Ë∑üË∏™loadingÁä∂ÊÄÅ
let isLoading = false;

// Ê∑ªÂä†Êñ∞ÁöÑÂÖ®Â±ÄÂèòÈáè
let folders = JSON.parse(localStorage.getItem('folders') || '{}');

// ÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', async () => {
    // ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô®
    document.getElementById('sendButton').addEventListener('click', sendMessage);
    document.getElementById('userInput').addEventListener('keypress', handleEnterPress);
    document.getElementById('uploadBtn').addEventListener('click', () => document.getElementById('fileInput').click());
    document.getElementById('fileInput').addEventListener('change', handleFileUpload);
    document.getElementById('historyBtn').addEventListener('click', showHistory);
    document.getElementById('newChatBtn').addEventListener('click', startNewChat);
    document.getElementById('newFolderBtn').addEventListener('click', createNewFolder);
    
    // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°ÜÁöÑÁÇπÂáª‰∫ã‰ª∂
    document.querySelector('.close').addEventListener('click', () => {
        document.getElementById('historyModal').style.display = 'none';
    });
    
    // ÁÇπÂáªÊ®°ÊÄÅÊ°ÜÂ§ñÈÉ®ÂÖ≥Èó≠
    window.addEventListener('click', (event) => {
        const modal = document.getElementById('historyModal');
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
    
    // ‰ªéchrome.storageÂêåÊ≠•Êï∞ÊçÆÂà∞localStorage
    try {
        const result = await chrome.storage.local.get('chatHistory');
        if (result.chatHistory) {
            localStorage.setItem('chatHistory', JSON.stringify(result.chatHistory));
        }
    } catch (error) {
        console.error('Error syncing storage:', error);
    }
    
    cleanupOldHistory();
    initializeDragAndDrop();
});

function handleEnterPress(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
    }
}

async function sendMessage() {
    const userInput = document.getElementById('userInput');
    const message = userInput.value.trim();
    
    if (!message || isLoading) return;
    
    addMessageToChat('user', message);
    userInput.value = '';
    
    // Ê∑ªÂä†loadingÊåáÁ§∫Âô®
    isLoading = true;
    const loadingDiv = addLoadingIndicator();
    
    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${API_KEY}`
            },
            body: JSON.stringify({
                model: "THUDM/glm-4-9b-chat",
                messages: [...currentMessages, { role: "user", content: message }]
            })
        });
        
        const data = await response.json();
        
        // ÁßªÈô§loadingÊåáÁ§∫Âô®
        loadingDiv.remove();
        isLoading = false;
        
        if (data.choices && data.choices[0]) {
            const aiResponse = data.choices[0].message.content;
            addMessageToChat('ai', aiResponse);
            currentMessages.push(
                { role: "user", content: message },
                { role: "assistant", content: aiResponse }
            );
            saveCurrentChat();
        } else {
            throw new Error('Invalid response from API');
        }
    } catch (error) {
        console.error('Error:', error);
        loadingDiv.remove();
        isLoading = false;
        addMessageToChat('ai', 'Êä±Ê≠âÔºåÂèëÁîü‰∫ÜÈîôËØØÔºåËØ∑Á®çÂêéÈáçËØï„ÄÇ');
    }
}

function addMessageToChat(role, content) {
    const chatContainer = document.getElementById('chatContainer');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${role}-message`;
    
    // ÂàõÂª∫Â§¥ÂÉèÂÖÉÁ¥†
    const avatarDiv = document.createElement('div');
    avatarDiv.className = 'message-avatar';
    avatarDiv.textContent = role === 'user' ? 'üë§' : 'ü§ñ';
    
    // ÂàõÂª∫Ê∂àÊÅØÂÜÖÂÆπÂÖÉÁ¥†
    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    contentDiv.textContent = content;
    
    // ÁªÑË£ÖÊ∂àÊÅØ
    messageDiv.appendChild(avatarDiv);
    messageDiv.appendChild(contentDiv);
    
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

async function handleFileUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    try {
        const content = await readFileContent(file);
        const message = `ËØ∑ÂàÜÊûê‰ª•‰∏ãÊñá‰ª∂ÂÜÖÂÆπÔºö\n\n${content}`;
        document.getElementById('userInput').value = message;
    } catch (error) {
        console.error('Error reading file:', error);
        addMessageToChat('ai', 'Êñá‰ª∂ËØªÂèñÂ§±Ë¥•ÔºåËØ∑ÈáçËØï„ÄÇ');
    }
}

function readFileContent(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target.result);
        reader.onerror = (e) => reject(e);
        reader.readAsText(file);
    });
}

function showHistory() {
    const historyList = document.getElementById('historyList');
    historyList.innerHTML = '';
    
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '{}');
    
    Object.entries(chatHistory)
        .sort(([,a], [,b]) => b.timestamp - a.timestamp)
        .forEach(([chatId, chat]) => {
            const historyItem = document.createElement('div');
            historyItem.className = 'history-item';
            historyItem.draggable = true; // Ê∑ªÂä†ÂèØÊãñÂä®Â±ûÊÄß
            historyItem.dataset.chatId = chatId; // Ê∑ªÂä†Êï∞ÊçÆÂ±ûÊÄß
            
            // ÂàõÂª∫ÂÜÖÂÆπÂÆπÂô®
            const contentDiv = document.createElement('div');
            contentDiv.className = 'history-item-content';
            contentDiv.textContent = `${new Date(chat.timestamp).toLocaleString()} - ${chat.title || chat.messages[0]?.content.substring(0, 50) || 'Êñ∞ÂØπËØù'}...`;
            contentDiv.onclick = () => loadChat(chatId);
            
            // ÂàõÂª∫Êìç‰ΩúÊåâÈíÆÂÆπÂô®
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'history-item-actions';
            
            // ÈáçÂëΩÂêçÊåâÈíÆ
            const renameBtn = document.createElement('button');
            renameBtn.className = 'history-action-btn';
            renameBtn.innerHTML = '‚úèÔ∏è';
            renameBtn.title = 'ÈáçÂëΩÂêç';
            renameBtn.onclick = (e) => {
                e.stopPropagation();
                renameHistoryItem(chatId, contentDiv);
            };
            
            // Âà†Èô§ÊåâÈíÆ
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'history-action-btn';
            deleteBtn.innerHTML = 'üóëÔ∏è';
            deleteBtn.title = 'Âà†Èô§';
            deleteBtn.onclick = (e) => {
                e.stopPropagation();
                deleteHistoryItem(chatId, historyItem);
            };
            
            // ÁªÑË£ÖÂÖÉÁ¥†
            actionsDiv.appendChild(renameBtn);
            actionsDiv.appendChild(deleteBtn);
            historyItem.appendChild(contentDiv);
            historyItem.appendChild(actionsDiv);
            
            // Ê∑ªÂä†ÊãñÊãΩ‰∫ã‰ª∂ÁõëÂê¨Âô®
            historyItem.addEventListener('dragstart', handleDragStart);
            historyItem.addEventListener('dragend', handleDragEnd);
            
            historyList.appendChild(historyItem);
        });
    
    document.getElementById('historyModal').style.display = 'block';
    renderFolders();
}

function loadChat(chatId) {
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '{}');
    const chat = chatHistory[chatId];
    
    if (chat) {
        document.getElementById('chatContainer').innerHTML = '';
        currentChatId = chatId;
        currentMessages = chat.messages;
        
        chat.messages.forEach(msg => {
            addMessageToChat(msg.role === 'user' ? 'user' : 'ai', msg.content);
        });
    }
    
    document.getElementById('historyModal').style.display = 'none';
}

function startNewChat() {
    if (currentMessages.length > 0) {
        saveCurrentChat();
    }
    
    document.getElementById('chatContainer').innerHTML = '';
    currentMessages = [];
    currentChatId = Date.now().toString();
}

function saveCurrentChat() {
    if (currentMessages.length === 0) return;
    
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '{}');
    const existingChat = chatHistory[currentChatId];
    
    chatHistory[currentChatId] = {
        messages: currentMessages,
        timestamp: Date.now(),
        title: existingChat?.title || currentMessages[0]?.content.substring(0, 50) || 'Êñ∞ÂØπËØù'
    };
    
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    
    // ÂêåÊ≠•Êõ¥Êñ∞chrome.storage
    chrome.storage.local.set({ chatHistory: chatHistory });
}

function cleanupOldHistory() {
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '{}');
    const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
    
    const newHistory = Object.fromEntries(
        Object.entries(chatHistory).filter(([, chat]) => chat.timestamp > sevenDaysAgo)
    );
    
    localStorage.setItem('chatHistory', JSON.stringify(newHistory));
}

function renameHistoryItem(chatId, contentDiv) {
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '{}');
    const chat = chatHistory[chatId];
    
    const input = document.createElement('input');
    input.className = 'rename-input';
    input.value = chat.title || chat.messages[0]?.content.substring(0, 50) || 'Êñ∞ÂØπËØù';
    
    const originalContent = contentDiv.innerHTML;
    contentDiv.innerHTML = '';
    contentDiv.appendChild(input);
    input.focus();
    
    const handleRename = () => {
        const newTitle = input.value.trim();
        if (newTitle) {
            chatHistory[chatId].title = newTitle;
            
            // ÂêåÊó∂Êõ¥Êñ∞localStorageÂíåchrome.storage
            localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
            chrome.storage.local.set({ chatHistory: chatHistory });
            
            contentDiv.textContent = `${new Date(chat.timestamp).toLocaleString()} - ${newTitle}...`;
        } else {
            contentDiv.innerHTML = originalContent;
        }
    };
    
    input.onblur = handleRename;
    input.onkeypress = (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleRename();
        }
    };
}

function deleteHistoryItem(chatId, historyItem) {
    if (confirm('Á°ÆÂÆöË¶ÅÂà†Èô§ËøôÊù°ÂéÜÂè≤ËÆ∞ÂΩïÂêóÔºü')) {
        const chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '{}');
        delete chatHistory[chatId];
        
        // ÂêåÊó∂Êõ¥Êñ∞localStorageÂíåchrome.storage
        localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
        chrome.storage.local.set({ chatHistory: chatHistory });
        
        historyItem.remove();
        
        // Â¶ÇÊûúÂà†Èô§ÁöÑÊòØÂΩìÂâçÂØπËØùÔºåÊ∏ÖÁ©∫ÂΩìÂâçÂØπËØù
        if (chatId === currentChatId) {
            startNewChat();
        }
    }
}

function addLoadingIndicator() {
    const chatContainer = document.getElementById('chatContainer');
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'typing-indicator';
    loadingDiv.innerHTML = '<span></span><span></span><span></span>';
    chatContainer.appendChild(loadingDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
    return loadingDiv;
}

function createNewFolder() {
    const folderName = prompt('ËØ∑ËæìÂÖ•Êñá‰ª∂Â§πÂêçÁß∞Ôºö');
    if (!folderName) return;
    
    const folderId = 'folder_' + Date.now();
    folders[folderId] = {
        name: folderName,
        chats: []
    };
    
    saveFolders();
    renderFolders();
}

function renderFolders() {
    const container = document.getElementById('importantChats');
    container.innerHTML = '';
    
    Object.entries(folders).forEach(([folderId, folder]) => {
        const folderDiv = document.createElement('div');
        folderDiv.className = 'folder';
        folderDiv.dataset.folderId = folderId;
        
        // ÂàõÂª∫Êñá‰ª∂Â§πÂ§¥ÈÉ®
        const folderHeader = document.createElement('div');
        folderHeader.className = 'folder-header';
        
        // ÂàõÂª∫Êñá‰ª∂Â§πÂõæÊ†á„ÄÅÂêçÁß∞ÂíåÊìç‰ΩúÊåâÈíÆ
        const headerContent = document.createElement('div');
        headerContent.className = 'folder-header-content';
        headerContent.innerHTML = `
            <div class="folder-icon">üìÅ</div>
            <div class="folder-name">${folder.name}</div>
        `;
        
        // ÂàõÂª∫Êñá‰ª∂Â§πÊìç‰ΩúÊåâÈíÆ
        const folderActions = document.createElement('div');
        folderActions.className = 'folder-actions';
        
        // Âà†Èô§Êñá‰ª∂Â§πÊåâÈíÆ
        const deleteFolderBtn = document.createElement('button');
        deleteFolderBtn.className = 'folder-action-btn';
        deleteFolderBtn.innerHTML = 'üóëÔ∏è';
        deleteFolderBtn.title = 'Âà†Èô§Êñá‰ª∂Â§π';
        deleteFolderBtn.onclick = (e) => {
            e.stopPropagation();
            deleteFolder(folderId);
        };
        
        // ÊäòÂè†ÊåâÈíÆ
        const toggleBtn = document.createElement('div');
        toggleBtn.className = 'folder-toggle';
        toggleBtn.innerHTML = '‚ñº';
        
        folderActions.appendChild(deleteFolderBtn);
        folderActions.appendChild(toggleBtn);
        
        folderHeader.appendChild(headerContent);
        folderHeader.appendChild(folderActions);
        
        // ÂàõÂª∫Êñá‰ª∂Â§πÂÜÖÂÆπÂÆπÂô®
        const folderContent = document.createElement('div');
        folderContent.className = 'folder-content expanded';
        
        // Ê∏≤ÊüìÊñá‰ª∂Â§πÂÜÖÁöÑËÅäÂ§©ËÆ∞ÂΩï
        if (folder.chats && folder.chats.length > 0) {
            folder.chats.forEach(chat => {
                const chatItem = document.createElement('div');
                chatItem.className = 'history-item';
                chatItem.draggable = true;
                chatItem.dataset.chatId = chat.id;
                
                const chatContent = document.createElement('div');
                chatContent.className = 'history-item-content';
                chatContent.textContent = `${new Date(chat.timestamp).toLocaleString()} - ${chat.title || chat.messages[0]?.content.substring(0, 50) || 'Êñ∞ÂØπËØù'}...`;
                chatContent.onclick = () => loadChat(chat.id);
                
                chatItem.appendChild(chatContent);
                folderContent.appendChild(chatItem);
                
                chatItem.addEventListener('dragstart', handleDragStart);
                chatItem.addEventListener('dragend', handleDragEnd);
            });
        } else {
            const emptyMessage = document.createElement('div');
            emptyMessage.className = 'empty-folder-message';
            emptyMessage.textContent = 'Êñá‰ª∂Â§π‰∏∫Á©∫';
            folderContent.appendChild(emptyMessage);
        }
        
        // Ê∑ªÂä†ÊäòÂè†/Â±ïÂºÄÂäüËÉΩ
        folderHeader.addEventListener('click', () => {
            const toggle = folderHeader.querySelector('.folder-toggle');
            const isExpanded = folderContent.classList.contains('expanded');
            
            if (isExpanded) {
                folderContent.classList.remove('expanded');
                toggle.classList.add('collapsed');
            } else {
                folderContent.classList.add('expanded');
                toggle.classList.remove('collapsed');
            }
        });
        
        // Ê∑ªÂä†ÊãñÊîæ‰∫ã‰ª∂ÁõëÂê¨Âô®
        folderDiv.addEventListener('dragover', handleDragOver);
        folderDiv.addEventListener('dragleave', handleDragLeave);
        folderDiv.addEventListener('drop', handleDrop);
        
        // ÁªÑË£ÖÊñá‰ª∂Â§π
        folderDiv.appendChild(folderHeader);
        folderDiv.appendChild(folderContent);
        container.appendChild(folderDiv);
    });
}

function initializeDragAndDrop() {
    // ‰∏∫ÂéÜÂè≤ËÆ∞ÂΩïÈ°πÊ∑ªÂä†ÊãñÂä®ÂäüËÉΩ
    document.querySelectorAll('.history-item').forEach(item => {
        if (!item.hasAttribute('draggable')) {  // Èò≤Ê≠¢ÈáçÂ§çÊ∑ªÂä†
            item.draggable = true;
            item.addEventListener('dragstart', handleDragStart);
            item.addEventListener('dragend', handleDragEnd);
        }
    });

    // ‰∏∫Êñá‰ª∂Â§πÊ∑ªÂä†ÊîæÁΩÆÂå∫Âüü
    document.querySelectorAll('.folder').forEach(folder => {
        folder.addEventListener('dragover', handleDragOver);
        folder.addEventListener('dragleave', handleDragLeave);
        folder.addEventListener('drop', handleDrop);
    });
}

function handleDragStart(e) {
    e.stopPropagation();
    const item = e.target.closest('.history-item');
    if (!item) return;

    e.dataTransfer.setData('text/plain', JSON.stringify({
        type: 'chat',
        chatId: item.dataset.chatId,
        source: item.closest('.folder') ? item.closest('.folder').dataset.folderId : 'history'
    }));
    
    item.classList.add('dragging');
    e.dataTransfer.effectAllowed = 'move';
}

function handleDragEnd(e) {
    e.target.closest('.history-item').classList.remove('dragging');
    document.querySelectorAll('.folder').forEach(folder => {
        folder.classList.remove('drag-over');
    });
}

function handleDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
    const folder = e.target.closest('.folder');
    if (folder) {
        folder.classList.add('drag-over');
    }
}

function handleDragLeave(e) {
    e.preventDefault();
    e.stopPropagation();
    const folder = e.target.closest('.folder');
    if (folder && !folder.contains(e.relatedTarget)) {
        folder.classList.remove('drag-over');
    }
}

function handleDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    
    const folder = e.target.closest('.folder');
    if (!folder) return;
    
    folder.classList.remove('drag-over');
    
    try {
        const data = JSON.parse(e.dataTransfer.getData('text/plain'));
        if (data.type === 'chat') {
            moveChat(data.chatId, data.source, folder.dataset.folderId);
        }
    } catch (error) {
        console.error('Drop error:', error);
    }
}

function moveChat(chatId, sourceLocation, targetFolderId) {
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '{}');
    const chat = chatHistory[chatId];
    
    if (!chat) return;
    
    // Â¶ÇÊûúÊ∫êÂíåÁõÆÊ†áÁõ∏ÂêåÔºå‰∏çÊâßË°åÁßªÂä®
    if (sourceLocation === targetFolderId) return;
    
    // ‰ªéÊ∫ê‰ΩçÁΩÆÁßªÈô§
    if (sourceLocation === 'history') {
        delete chatHistory[chatId];
        localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
        chrome.storage.local.set({ chatHistory: chatHistory });
    } else {
        const sourceFolder = folders[sourceLocation];
        if (sourceFolder) {
            sourceFolder.chats = sourceFolder.chats.filter(c => c.id !== chatId);
        }
    }
    
    // Ê∑ªÂä†Âà∞ÁõÆÊ†á‰ΩçÁΩÆ
    if (targetFolderId === 'history') {
        chatHistory[chatId] = chat;
        localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
        chrome.storage.local.set({ chatHistory: chatHistory });
    } else {
        if (!folders[targetFolderId].chats) {
            folders[targetFolderId].chats = [];
        }
        folders[targetFolderId].chats.push({
            id: chatId,
            ...chat
        });
        saveFolders();
    }
    
    // Âà∑Êñ∞ÊòæÁ§∫
    showHistory();
}

function showFolderContent(folderId) {
    const folderDiv = document.querySelector(`[data-folder-id="${folderId}"]`);
    const folderContent = folderDiv.querySelector('.folder-content');
    const toggle = folderDiv.querySelector('.folder-toggle');
    
    const isExpanded = folderContent.classList.contains('expanded');
    
    if (isExpanded) {
        folderContent.classList.remove('expanded');
        toggle.classList.add('collapsed');
    } else {
        folderContent.classList.add('expanded');
        toggle.classList.remove('collapsed');
    }
}

function saveFolders() {
    localStorage.setItem('folders', JSON.stringify(folders));
    chrome.storage.local.set({ folders: folders });
}

// Ê∑ªÂä†Âà†Èô§Êñá‰ª∂Â§πÂäüËÉΩ
function deleteFolder(folderId) {
    if (!confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ê≠§Êñá‰ª∂Â§πÂêóÔºüÊñá‰ª∂Â§πÂÜÖÁöÑÂØπËØùÂ∞ÜË¢´ÁßªÂõûÂéÜÂè≤ËÆ∞ÂΩï„ÄÇ')) return;
    
    const folder = folders[folderId];
    if (!folder) return;
    
    // Â∞ÜÊñá‰ª∂Â§πÂÜÖÁöÑÂØπËØùÁßªÂõûÂéÜÂè≤ËÆ∞ÂΩï
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '{}');
    
    if (folder.chats) {
        folder.chats.forEach(chat => {
            chatHistory[chat.id] = {
                messages: chat.messages,
                timestamp: chat.timestamp,
                title: chat.title
            };
        });
    }
    
    // Êõ¥Êñ∞ÂéÜÂè≤ËÆ∞ÂΩï
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    chrome.storage.local.set({ chatHistory: chatHistory });
    
    // Âà†Èô§Êñá‰ª∂Â§π
    delete folders[folderId];
    saveFolders();
    
    // Âà∑Êñ∞ÊòæÁ§∫
    showHistory();
} 